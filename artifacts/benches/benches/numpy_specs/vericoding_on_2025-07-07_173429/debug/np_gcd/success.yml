num_iterations: 26
success: false
verification_error: "error: could not prove termination\n  --> /tmp/tmpzgjj7c6m.rs:12:9\n\
  \   |\n12 |         gcd_int(b, a % b)\n   |         ^^^^^^^^^^^^^^^^^\n\nnote: while\
  \ loop: not all errors may have been reported; rerun with a higher value for --multiple-errors\
  \ to find other potential errors in this function\n  --> /tmp/tmpzgjj7c6m.rs:49:5\n\
  \   |\n49 |     while i < a.len()\n   |     ^^^^^^^^^^^^^^^^^\n\nnote: recommendation\
  \ not met\n  --> /tmp/tmpzgjj7c6m.rs:53:43\n   |\n6  |     recommends a >= 0, b\
  \ >= 0\n   |                ------ recommendation not met\n...\n53 |           \
  \  forall|j: int| 0 <= j < i ==> gcd_int(a[j] as int, b[j] as int) == res[j] as\
  \ int,\n   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
  \nnote: recommendation not met\n  --> /tmp/tmpzgjj7c6m.rs:53:64\n   |\n53 |    \
  \         forall|j: int| 0 <= j < i ==> gcd_int(a[j] as int, b[j] as int) == res[j]\
  \ as int,\n   |                                                                ^^^^\n\
  \   |\n  ::: /home/lacra/verus/vstd/std_specs/vec.rs:23:18\n   |\n23 |         \
  \    0 <= i < self.view().len(),\n   |                  - recommendation not met\n\
  \nerror: precondition not satisfied\n  --> /tmp/tmpzgjj7c6m.rs:56:23\n   |\n17 |\
  \     requires a >= 0 && b >= 0\n   |              ---------------- failed precondition\n\
  ...\n56 |         let gcd_val = gcd_int_exec(a[i], b[i]);  \n   |              \
  \         ^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: precondition not satisfied\n  --> /tmp/tmpzgjj7c6m.rs:56:42\n\
  \   |\n56 |         let gcd_val = gcd_int_exec(a[i], b[i]);  \n   |            \
  \                              ^^^^\n   |\n  ::: /home/lacra/verus/vstd/std_specs/vec.rs:48:9\n\
  \   |\n48 |         i < vec.view().len(),\n   |         -------------------- failed\
  \ precondition\n\nnote: automatically chose triggers for this expression:\n  -->\
  \ /tmp/tmpzgjj7c6m.rs:44:9\n   |\n44 |         forall|i: int| 0 <= i < a.len() ==>\
  \ gcd_int(a[i] as int, b[i] as int) == res[i] as int,\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
  \nnote:   trigger 1 of 1:\n  --> /tmp/tmpzgjj7c6m.rs:44:82\n   |\n44 |         forall|i:\
  \ int| 0 <= i < a.len() ==> gcd_int(a[i] as int, b[i] as int) == res[i] as int,\n\
  \   |                                                                          \
  \        ^^^^^^\n\nnote: automatically chose triggers for this expression:\n  -->\
  \ /tmp/tmpzgjj7c6m.rs:53:13\n   |\n53 |             forall|j: int| 0 <= j < i ==>\
  \ gcd_int(a[j] as int, b[j] as int) == res[j] as int,\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
  \nnote:   trigger 1 of 1:\n  --> /tmp/tmpzgjj7c6m.rs:53:80\n   |\n53 |         \
  \    forall|j: int| 0 <= j < i ==> gcd_int(a[j] as int, b[j] as int) == res[j] as\
  \ int,\n   |                                                                   \
  \             ^^^^^^\n\nnote: Verus printed one or more automatically chosen quantifier\
  \ triggers\n      because it had low confidence in the chosen triggers.\n      To\
  \ suppress these messages, do one of the following:\n        (1) manually annotate\
  \ a single desired trigger using #[trigger]\n            (example: forall|i: int,\
  \ j: int| f(i) && #[trigger] g(i) && #[trigger] h(j)),\n        (2) manually annotate\
  \ multiple desired triggers using #![trigger ...]\n            (example: forall|i:\
  \ int| #![trigger f(i)] #![trigger g(i)] f(i) && g(i)),\n        (3) accept the\
  \ automatically chosen trigger using #![auto]\n            (example: forall|i: int,\
  \ j: int| #![auto] f(i) && g(i) && h(j))\n        (4) use the --triggers-silent\
  \ command-line option to suppress all printing of triggers.\n      (Note: triggers\
  \ are used by the underlying SMT theorem prover to instantiate quantifiers;\n  \
  \    the theorem prover instantiates a quantifier whenever some expression matches\
  \ the\n      pattern specified by one of the quantifier's triggers.)\n  --> /tmp/tmpzgjj7c6m.rs:53:13\n\
  \   |\n53 |             forall|j: int| 0 <= j < i ==> gcd_int(a[j] as int, b[j]\
  \ as int) == res[j] as int,\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
  \nerror: aborting due to 3 previous errors\n\n"
verification_output: 'verification results:: 4 verified, 2 errors

  '
